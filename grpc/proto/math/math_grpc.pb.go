// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathGreeterClient is the client API for MathGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathGreeterClient interface {
	// Sends a greeting
	Calculate(ctx context.Context, in *Num, opts ...grpc.CallOption) (*CalReply, error)
}

type mathGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewMathGreeterClient(cc grpc.ClientConnInterface) MathGreeterClient {
	return &mathGreeterClient{cc}
}

func (c *mathGreeterClient) Calculate(ctx context.Context, in *Num, opts ...grpc.CallOption) (*CalReply, error) {
	out := new(CalReply)
	err := c.cc.Invoke(ctx, "/math.MathGreeter/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathGreeterServer is the server API for MathGreeter service.
// All implementations should embed UnimplementedMathGreeterServer
// for forward compatibility
type MathGreeterServer interface {
	// Sends a greeting
	Calculate(context.Context, *Num) (*CalReply, error)
}

// UnimplementedMathGreeterServer should be embedded to have forward compatible implementations.
type UnimplementedMathGreeterServer struct {
}

func (UnimplementedMathGreeterServer) Calculate(context.Context, *Num) (*CalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}

// UnsafeMathGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathGreeterServer will
// result in compilation errors.
type UnsafeMathGreeterServer interface {
	mustEmbedUnimplementedMathGreeterServer()
}

func RegisterMathGreeterServer(s grpc.ServiceRegistrar, srv MathGreeterServer) {
	s.RegisterService(&MathGreeter_ServiceDesc, srv)
}

func _MathGreeter_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathGreeterServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math.MathGreeter/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathGreeterServer).Calculate(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

// MathGreeter_ServiceDesc is the grpc.ServiceDesc for MathGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "math.MathGreeter",
	HandlerType: (*MathGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _MathGreeter_Calculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "math.proto",
}
